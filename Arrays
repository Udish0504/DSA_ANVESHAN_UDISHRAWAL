Question-1:
#include <iostream>
using namespace std;
int main(){
    int a[9] = {2,5,6,4,7,8,3,6,4};
    int temp;
    for(int i = 0; i<9/2; i++){
        temp = a[i];
        a[i] = a[9-i-1];
        a[9-i-1] = temp;
    }
    for(int i = 0; i < 9; i++){
        cout << a[i] << " ";
    }
}

question-2:
#include <iostream>
using namespace std;
void minmaxarray(int a[] , int N){
   int max = a[0], min = a[0];
   for(int i = 1; i < N; i++){
      if(max < a[i])
         max = a[i];
      if(min > a[i])
         min = a[i];
   }
   cout<<"Maximum = "<<max;
   cout<<"Minimum = "<<min;
}
int main(){
   int a[] = {2, 1, 6, 9, 4, 10, 15, 21};
   int N = 8;
   minmaxarray(a, N);
   return 0;
}

Question-4:
#include<iostream>
using namespace std;
int main ()
{
 int n;
 cin >> n;
 int arr[n];
 for (int i = 0; i < n; i++) cin >> arr[i];
 int count_0 = 0, count_1 = 0, count_2 = 0;
 for (int i = 0; i < n; i++)
    {
        if (arr[i] == 0)
            count_0++;
        else if (arr[i] == 1)
            count_1++;
        else
            count_2++;
    }
    int i = 0;
    while(count_0--)
        arr[i++] = 0;
    while (count_1--)
        arr[i++] = 1;
    while (count_2--)
        arr[i++] = 2;
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}
Question-5:
#include<iostream>
using namespace std;
int temp;
void negative(int arr[], int n)
{
    int j = 0;
    for (int i = 0; i < n; i++)
    {
        if (arr[i] < 0)
        {
            if (i != j)
                // swap(arr[i], arr[j]);
                
                temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            j++;
        }
    }
    for (int i = 0; i < n; i++)
        cout<<arr[i]<<" ";
}
int main()
{
    int arr[] = { 2,4,-10,13,-7,-60,52,8,-19 };
    int n = sizeof(arr) / sizeof(arr[0]);
    negative(arr, n);
    return 0;
}


Question-6:
#include <iostream>
using namespace std;

void unionofarray(int a[], int b[], int m, int n)
{
	int i = 0, j = 0;
	cout << "\n\nUnion Of Array\n\n";

	while (i < m && j < n)
	{
		if (a[i] < b[j])
			cout << a[i++] << " ";
		else if (a[i] > b[j])
			cout << b[j++] << " ";
		else
		{
			cout << a[i++] << " ";
			j++;
		}
	}

	while (i < m)
		cout << a[i++] << " ";
	while (j < n)
		cout << b[j++] << " ";
}

void intersection(int a[], int b[], int m, int n)
{
	int i = 0, j = 0;
	cout << "\n\nIntersection Of Array\n\n";
	while (i < m && j < n)
	{
		if (a[i] < b[j])
			i++;
		else if (a[i] > b[j])
			j++;
		else
		{
			cout << a[i++] << " ";
			j++;
		}
	}
}

int main()
{
	int m, i, j, n, a[100], b[100];

	cout << "Enter The Size Of First Array \n";
	cin >> m;

	cout << "\nEnter The Element In First Array \n\n";

	for (i = 0; i < m; i++)
	{
		cin >> a[i];
	}

	cout << "\nEnter The Size Of Second Array \n";
	cin >> n;

	cout << "\nEnter The Element In Second Array \n\n";

	for (j = 0; j < n; j++)
	{
		cin >> b[j];
	}

	unionofarray(a, b, m, n);
	intersection(a, b, m, n);

	return 0;
}

Question-7:
#include <iostream>
using namespace std;
void rotate(int array[], int length)
{
    int temp = array[length - 1], i;
    for (i = length - 1; i > 0; i--)
        array[i] = array[i - 1];
    array[0] = temp;
}
void print(int array[], int length)
{
    for (int i = 0; i < length; i++)
        cout << array[i] << " ";
    cout << endl;
}
int main()
{
    int array[100], N, d;
    
    cout << "Enter Number of elements: ";
    cin >> N;

    for (int i = 0; i < N; i++) {
        cout << "Enter element " << i + 1 << ":";
        cin >> array[i];
    }
    
    rotate(array, N);
    cout << "Rotated Array" << endl;
    print(array, N);

    return 0;
}

Question-10:
#include <bits/stdc++.h>
using namespace std;

int minJumps(int arr[], int n)
{
  int jumps[n];
  int i, j;

  if (n == 0 || arr[0] == 0)
    return INT_MAX;
  jumps[0] = 0;
  for (i = 1; i < n; i++) {
    jumps[i] = INT_MAX;
    for (j = 0; j < i; j++) {
      if (i <= j + arr[j] && jumps[j] != INT_MAX)  
           { 
               jumps[i] = min(jumps[i], jumps[j] + 1); 
               break; 
           } 
        } 
    } 
   return jumps[n - 1]; 
 } 
int main() 
{ 
   int n; 
   cin>>n;
   int arr[n];

   for(int i=0; i<n; i++) cin>>arr[i];

   cout<<"Minimum number of jumps to reach end is "<< minJumps(arr, n);

   return 0;
}
